{"version":3,"file":"components-Input-stories-mdx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjIA;AAiBA;AAOA;AANA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA","sources":["webpack://@tkui-ds/core/../../node_modules/memoizerific/ sync","webpack://@tkui-ds/core/","webpack://@tkui-ds/core/./src/components/Input.tsx"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../node_modules/memoizerific sync recursive\";\nmodule.exports = webpackEmptyContext;",null,"import React from 'react';\n\nexport interface InputProps {\n  /** Input etiketi */\n  label: string;\n  /** Placeholder metni */\n  placeholder?: string;\n  /** Input tipi */\n  type?: 'text' | 'password' | 'email' | 'number';\n  /** Hata mesajı */\n  error?: string;\n  /** Gerekli alan durumu */\n  required?: boolean;\n  /** Değişiklik işleyicisi */\n  onChange?: (value: string) => void;\n}\n\nexport const Input = ({\n  label,\n  placeholder = '',\n  type = 'text',\n  error,\n  required = false,\n  onChange,\n}: InputProps) => {\n  const id = `input-${label.toLowerCase().replace(/\\s+/g, '-')}`;\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange?.(e.target.value);\n  };\n\n  return (\n    <div className=\"input-container\">\n      <label htmlFor={id} className=\"input-label\">\n        {label} {required && <span className=\"required-mark\">*</span>}\n      </label>\n      <input\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        onChange={handleChange}\n        className={`input-field ${error ? 'input-error' : ''}`}\n        aria-invalid={!!error}\n        required={required}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  );\n}; "],"names":[],"sourceRoot":""}