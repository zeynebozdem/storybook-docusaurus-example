{"version":3,"file":"components-Modal-stories-mdx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClFA;AAeA;AAMA;AAJA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA","sources":["webpack://@tkui-ds/core/../../node_modules/memoizerific/ sync","webpack://@tkui-ds/core/","webpack://@tkui-ds/core/./src/components/Modal.tsx"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../node_modules/memoizerific sync recursive\";\nmodule.exports = webpackEmptyContext;",null,"import React, { useEffect, useRef } from 'react';\n\nexport interface ModalProps {\n  /** Modal başlığı */\n  title: string;\n  /** Modal içeriği */\n  children: React.ReactNode;\n  /** Modal açık/kapalı durumu */\n  isOpen: boolean;\n  /** Kapatma işleyicisi */\n  onClose: () => void;\n  /** Kapatma butonuna alternatif metin */\n  closeButtonText?: string;\n}\n\nexport const Modal = ({\n  title,\n  children,\n  isOpen,\n  onClose,\n  closeButtonText = 'Kapat',\n}: ModalProps) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n      document.body.style.overflow = 'hidden';\n      modalRef.current?.focus();\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.body.style.overflow = '';\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div \n        className=\"modal-container\" \n        onClick={(e) => e.stopPropagation()} \n        ref={modalRef}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"modal-title\"\n      >\n        <div className=\"modal-header\">\n          <h2 id=\"modal-title\" className=\"modal-title\">{title}</h2>\n          <button \n            className=\"modal-close\" \n            onClick={onClose}\n            aria-label={closeButtonText}\n          >\n            ×\n          </button>\n        </div>\n        <div className=\"modal-content\">\n          {children}\n        </div>\n        <div className=\"modal-footer\">\n          <button className=\"modal-button\" onClick={onClose}>\n            {closeButtonText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}; "],"names":[],"sourceRoot":""}